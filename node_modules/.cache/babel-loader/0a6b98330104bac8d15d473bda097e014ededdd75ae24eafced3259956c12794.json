{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\premd\\\\Dropbox\\\\My PC (LAPTOP-RPO2REH4)\\\\Documents\\\\83_CodeBullets_BnB24\\\\src\\\\Components\\\\chatbot\\\\Chatbot.js\";\nimport React from 'react';\n// import \"../Styles/Chatbot.css\";\nimport ChatBot from 'react-simple-chatbot';\nimport Dialog from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass Chatbot extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      age: '',\n      symptoms: [],\n      disease: ''\n    };\n  }\n  render() {\n    const {\n      name,\n      age,\n      symptoms,\n      disease\n    } = this.state;\n    const handleEnd = ({\n      steps,\n      values\n    }) => {\n      const {\n        name,\n        age,\n        symptoms\n      } = values;\n      // Ensure symptoms is an array\n      const selectedSymptoms = Array.isArray(symptoms) ? symptoms : [];\n      let suggestedDisease = '';\n\n      // Check for specific symptoms and suggest corresponding disease\n      if (selectedSymptoms.includes('Fever') && selectedSymptoms.includes('Cough')) {\n        suggestedDisease = 'Common Cold';\n      } else if (selectedSymptoms.includes('Fever') && selectedSymptoms.includes('Fatigue')) {\n        suggestedDisease = 'Flu';\n      } else if (selectedSymptoms.includes('Headache')) {\n        suggestedDisease = 'Migraine';\n      } else {\n        suggestedDisease = 'Unknown';\n      }\n      this.setState({\n        name,\n        age,\n        symptoms: selectedSymptoms,\n        disease: suggestedDisease\n      });\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(ChatBot, {\n        headerTitle: \"Telemedicine Chatbot\",\n        steps: [{\n          id: '1',\n          message: 'Welcome to Telemedicine Chatbot! What is your name?',\n          trigger: 'name'\n        }, {\n          id: 'name',\n          user: true,\n          trigger: '3',\n          validator: value => {\n            if (/^[A-Za-z\\s]+$/.test(value)) {\n              return true;\n            } else {\n              return 'Please enter a valid name (only alphabets and spaces)';\n            }\n          }\n        }, {\n          id: '3',\n          message: 'Hi {previousValue}, please enter your age.',\n          trigger: 'age'\n        }, {\n          id: 'age',\n          user: true,\n          trigger: '5',\n          validator: value => {\n            if (isNaN(value)) {\n              return 'Age must be a number.';\n            } else if (parseInt(value) <= 0) {\n              return 'Age must be a positive number.';\n            } else {\n              return true;\n            }\n          }\n        }, {\n          id: '5',\n          message: 'Please select the symptoms you are experiencing:',\n          trigger: 'symptoms'\n        }, {\n          id: 'symptoms',\n          options: [{\n            value: 'Fever',\n            label: 'Fever',\n            trigger: 'symptoms'\n          }, {\n            value: 'Cough',\n            label: 'Cough',\n            trigger: 'symptoms'\n          }, {\n            value: 'Headache',\n            label: 'Headache',\n            trigger: 'symptoms'\n          }, {\n            value: 'Fatigue',\n            label: 'Fatigue',\n            trigger: 'symptoms'\n          }, {\n            value: 'Other',\n            label: 'Other',\n            trigger: 'disease'\n          }, {\n            value: 'None',\n            label: 'None',\n            trigger: 'disease'\n          }],\n          trigger: '6'\n        }, {\n          id: 'disease',\n          message: ({\n            previousValue\n          }) => {\n            if (previousValue === 'None') {\n              return 'Based on your input, you seem to be healthy. If you have further concerns, please consult a healthcare professional.';\n            } else if (previousValue === 'Other') {\n              return 'Based on your symptoms, it is advisable to consult a doctor for a proper diagnosis.';\n            } else {\n              return `Based on your symptoms, you might be having ${disease}. Please consult a doctor for further evaluation.`;\n            }\n          },\n          end: true\n        }],\n        floating: true,\n        handleEnd: handleEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\nexport default Chatbot;","map":{"version":3,"names":["React","ChatBot","Dialog","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","Component","constructor","props","state","name","age","symptoms","disease","render","handleEnd","steps","values","selectedSymptoms","Array","isArray","suggestedDisease","includes","setState","children","headerTitle","id","message","trigger","user","validator","value","test","isNaN","parseInt","options","label","previousValue","end","floating","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/premd/Dropbox/My PC (LAPTOP-RPO2REH4)/Documents/83_CodeBullets_BnB24/src/Components/chatbot/Chatbot.js"],"sourcesContent":["import React from 'react';\r\n// import \"../Styles/Chatbot.css\";\r\nimport ChatBot from 'react-simple-chatbot';\r\nimport Dialog from '@mui/material'\r\n\r\nclass Chatbot extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: '',\r\n      age: '',\r\n      symptoms: [],\r\n      disease: '',\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { name, age, symptoms, disease } = this.state;\r\n\r\n    const handleEnd = ({ steps, values }) => {\r\n  const { name, age, symptoms } = values;\r\n  // Ensure symptoms is an array\r\n  const selectedSymptoms = Array.isArray(symptoms) ? symptoms : [];\r\n  let suggestedDisease = '';\r\n\r\n  // Check for specific symptoms and suggest corresponding disease\r\n  if (selectedSymptoms.includes('Fever') && selectedSymptoms.includes('Cough')) {\r\n    suggestedDisease = 'Common Cold';\r\n  } else if (selectedSymptoms.includes('Fever') && selectedSymptoms.includes('Fatigue')) {\r\n    suggestedDisease = 'Flu';\r\n  } else if (selectedSymptoms.includes('Headache')) {\r\n    suggestedDisease = 'Migraine';\r\n  } else {\r\n    suggestedDisease = 'Unknown';\r\n  }\r\n\r\n  this.setState({ name, age, symptoms: selectedSymptoms, disease: suggestedDisease });\r\n};\r\n\r\n    \r\n\r\n    return (\r\n      <>\r\n        <ChatBot\r\n          headerTitle=\"Telemedicine Chatbot\"\r\n          steps={[\r\n            {\r\n              id: '1',\r\n              message: 'Welcome to Telemedicine Chatbot! What is your name?',\r\n              trigger: 'name',\r\n            },\r\n            {\r\n              id: 'name',\r\n              user: true,\r\n              trigger: '3',\r\n              validator: (value) => {\r\n                if (/^[A-Za-z\\s]+$/.test(value)) {\r\n                  return true;\r\n                } else {\r\n                  return 'Please enter a valid name (only alphabets and spaces)';\r\n                }\r\n              },\r\n            },\r\n            {\r\n              id: '3',\r\n              message: 'Hi {previousValue}, please enter your age.',\r\n              trigger: 'age',\r\n            },\r\n            {\r\n              id: 'age',\r\n              user: true,\r\n              trigger: '5',\r\n              validator: (value) => {\r\n                if (isNaN(value)) {\r\n                  return 'Age must be a number.';\r\n                } else if (parseInt(value) <= 0) {\r\n                  return 'Age must be a positive number.';\r\n                } else {\r\n                  return true;\r\n                }\r\n              },\r\n            },\r\n            {\r\n              id: '5',\r\n              message: 'Please select the symptoms you are experiencing:',\r\n              trigger: 'symptoms',\r\n            },\r\n            {\r\n              id: 'symptoms',\r\n              options: [\r\n                { value: 'Fever', label: 'Fever', trigger: 'symptoms' },\r\n                { value: 'Cough', label: 'Cough', trigger: 'symptoms' },\r\n                { value: 'Headache', label: 'Headache', trigger: 'symptoms' },\r\n                { value: 'Fatigue', label: 'Fatigue', trigger: 'symptoms' },\r\n                { value: 'Other', label: 'Other', trigger: 'disease' },\r\n                { value: 'None', label: 'None', trigger: 'disease' },\r\n              ],\r\n              trigger: '6',\r\n            },\r\n            {\r\n              id: 'disease',\r\n              message: ({ previousValue }) => {\r\n                if (previousValue === 'None') {\r\n                  return 'Based on your input, you seem to be healthy. If you have further concerns, please consult a healthcare professional.';\r\n                } else if (previousValue === 'Other') {\r\n                  return 'Based on your symptoms, it is advisable to consult a doctor for a proper diagnosis.';\r\n                } else {\r\n                  return `Based on your symptoms, you might be having ${disease}. Please consult a doctor for further evaluation.`;\r\n                }\r\n              },\r\n              end: true,\r\n            },\r\n          ]}\r\n          floating={true}\r\n          handleEnd={handleEnd}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}